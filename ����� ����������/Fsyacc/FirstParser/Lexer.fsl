{
module Lexer
open System
open Parser
open Microsoft.FSharp.Text.Lexing

let lexeme lexbuf =
    LexBuffer<char>.LexemeString lexbuf
}

// These are some regular expression definitions
let a = ('a' | 'A')
let b = ('b' | 'B')
let c = ('c' | 'C')
let o = ('o' | 'O')
let s = ('s' | 'S')
let i_ = ('и' | 'И')

let digit = ['0'-'9']
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')

rule tokenize = parse
| whitespace	{ tokenize lexbuf }
| newline       { tokenize lexbuf }
// Operators
| "+"			{ PLUS }
| "-"			{ MINUS }
| "*"			{ ASTER }
| "/"			{ SLASH }
| "%"		{ MOD }
| c o s	    { FUN (lexeme lexbuf)}
| "sin"   	{ FUN (lexeme lexbuf)}
| a b s		{ FUN ("abs")}
| i_			{ FUN ("abs")}
// Misc
| "("			{ LPAREN }
| ")"			{ RPAREN }
// Numberic constants
| ['-']?digit+									{ INT32 (Int32.Parse(lexeme lexbuf)) }
| ['-']?digit+('.'digit+)?(['e''E']digit+)?		{ FLOAT (Double.Parse(lexeme lexbuf)) }
// EOF
| eof   { EOF }

