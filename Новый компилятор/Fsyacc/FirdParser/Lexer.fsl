{
module Lexer
open System
open Parser
open Microsoft.FSharp.Text.Lexing

let lexeme lexbuf =
    LexBuffer<char>.LexemeString lexbuf
}

// These are some regular expression definitions
let digit = ['0'-'9']
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')

rule tokenize = parse
| whitespace	{ tokenize lexbuf }
| newline       { tokenize lexbuf }
// Operators
| "+"			{ PLUS }
| "-"			{ MINUS }
| "*"			{ ASTER }
| "/"			{ SLASH }
// Misc
| "("			{ LPAREN }
| ")"			{ RPAREN }
// Numberic constants
| ['-']?digit+									{ RESULT ((lexeme lexbuf), (lexbuf.EndPos.Column), "i") }
| ['-']?digit+('.'digit+)?(['e''E']digit+)?		{ RESULT ((lexeme lexbuf), (lexbuf.EndPos.Column), "r") }
// EOF
| eof   { EOF }

